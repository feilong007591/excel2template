<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="672" height="685"
		 initialize="group1_initializeHandler(event)"
		 >
	<fx:Script>
		<![CDATA[
			import data.Config;
			import data.ProjInfo;
			
			import export.CPlusPlusExport;
			import export.CSExport;
			import export.Export;
			import export.LuaExport;
			import export.ServerJavaExport;
			
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import spark.events.TextOperationEvent;
			
			import utils.MyLog;
			
			private var _projInfo:ProjInfo;
			
			private function initEvent():void
			{
//				this.addEventListener(KeyboardEvent.KEY_UP,onKeyUpHandler);	
			}
			
			public function setProjInfo(projInfo:ProjInfo):void
			{
				_projInfo = projInfo;
				
				MyLog.textarea = debugLabel;
				initEvent();
				initView();
				loadList();
			}
			
			private function onKeyUpHandler(evt:KeyboardEvent):void
			{
				switch(evt.keyCode)
				{
					case Keyboard.ENTER:
						if(tempateList.selectedItem)
						{
							trace("open:" + tempateList.selectedItem.path);
							var file:File = new File(tempateList.selectedItem.path);
							if(file.exists)
							{
								file.openWithDefaultApplication();
							}
						}
						
						break;
				}
			}
			
			private function initView():void
			{
				pathLabel.text = Config.TEMPLATE_PATH;
				classPathLabel.text = Config.TEMPLATE_CLASS_PATH;
				binaryPathLabel.text = Config.TEMPLATE_BINARY_PATH;
				
				
				comboBox.dataProvider = Config.OUT_DATA;
				comboBox.selectedIndex = Config.OUT_TYPE;
				
				isOutClass.selected = Config.IS_EXPORT_CLASS;
				isZlib.selected = Config.IS_ZLIB;
				
				nameLabel.text = "【" + _projInfo.projName + "】";
			}
			
			//创建新模版
			protected function createBtn_clickHandler(event:MouseEvent):void
			{
				if(newLabel.text != "")
				{
					var file:File = new File(File.applicationDirectory.nativePath + "/templates/Template.xlsx");
					var newFile:File = new File(Config.TEMPLATE_PATH + "/" + newLabel.text + "Template.xlsx");
					file.copyTo(newFile, true);
					
					try
					{
						newFile.openWithDefaultApplication();
					} 
					catch(error:Error)
					{
						
					}
				}
				newLabel.text = "";
				loadList();
			}
			
			//输出
			protected function outputBtn_clickHandler(event:MouseEvent):void
			{
				_projInfo.outType = comboBox.selectedItem.value;
				Config.exportIndex ++;
							
				var dataProvider:ArrayList = tempateList.dataProvider as ArrayList;
				var len:int = dataProvider.source.length;		
				for (var i:int = 0; i < len; i++) 
				{
					var obj:Object = dataProvider.source[i];
					
					var cls = comboBox.selectedItem.cls;
					if(null != cls)
					{
						var export:Export = new cls(obj.path) as Export;	
					}
				}
			}
			
			protected function changePathBtn_clickHandler(event:MouseEvent):void
			{
				var file:File = File.applicationDirectory;
				file.addEventListener(Event.SELECT,onSelectHandler);
				file.browseForDirectory("选择输出目录");
				
				function onSelectHandler(evt:Event):void
				{
					Config.TEMPLATE_PATH = file.nativePath;
					initView();
					loadList();
				}
			}
			
			protected function changeClassPathBtn_clickHandler(event:MouseEvent):void
			{
				var file:File = File.applicationDirectory;
				file.addEventListener(Event.SELECT,onSelectHandler);
				file.browseForDirectory("选择输出目录");
				
				function onSelectHandler(evt:Event):void
				{
					_projInfo.outPath1 = file.nativePath;
					initView();
//					loadList();
				}
			}
			
			protected function changeBinaryPathBtn_clickHandler(event:MouseEvent):void
			{
				var file:File = File.applicationDirectory;
				file.addEventListener(Event.SELECT,onSelectHandler);
				file.browseForDirectory("选择输出目录");
				
				function onSelectHandler(evt:Event):void
				{
					_projInfo.outPath2 = file.nativePath;
					initView();
//					loadList();
				}
			}
			
			private function loadList():void
			{
				var file:File = new File(Config.TEMPLATE_PATH);
				if(!file.exists)
				{
					Alert.show("模版表文件夹不存在");
					return;	
				}
				var dataArr:Array = [];
				var dataProvider:ArrayList = new ArrayList();
				var list:Array = file.getDirectoryListing();
				for (var i:int = 0; i < list.length; i++) 
				{
					var fi:File = list[i] as File;
					if(fi.extension == "xls" || fi.extension == "xlsx")
					{
						if(fi.name.indexOf("~$") == -1)
						{
							dataProvider.addItem({"name":fi.name,"path":fi.nativePath});	
						}
					}
				}
				tempateList.dataProvider = dataProvider;
			}
			
			protected function openPathBtn_clickHandler(event:MouseEvent):void
			{
				/*
				NativeApplication.nativeApplication.autoExit=true;
				var file:File = new File("/Applications/Path Finder.app");
				var nativeProcessStartupInfo:NativeProcessStartupInfo = new NativeProcessStartupInfo();
				nativeProcessStartupInfo = new NativeProcessStartupInfo();
				nativeProcessStartupInfo.executable = file;
				var arguments:Vector.<String> = new Vector.<String>();
				arguments.push(Config.TEMPLATE_PATH);
				nativeProcessStartupInfo.arguments = arguments;
				
				var process = new NativeProcess();
				process.start(nativeProcessStartupInfo);
				*/
			}
			
			protected function flushBtn_clickHandler(event:MouseEvent):void
			{
				loadList();				
			}
			
			protected function isOutClass_changeHandler(event:Event):void
			{
				Config.IS_EXPORT_CLASS = isOutClass.selected;
				Config.IS_ZLIB = isZlib.selected;
			}
			
			protected function closeBtn_clickHandler(event:MouseEvent):void
			{
				if(parent){
					(parent as Group).removeElement(this);
				}
			}
			
			protected function group1_initializeHandler(event:FlexEvent):void
			{
				graphics.beginFill(0xffffff);
				graphics.drawRect(0,0,2000,2000);
				graphics.endFill();
				
				tempateList.addEventListener(KeyboardEvent.KEY_UP,onKeyUpHandler);
			}
			
			protected function clearBtn_clickHandler(event:MouseEvent):void
			{
				debugLabel.text = "";		
			}
			
			protected function newLabel_changeHandler(event:TextOperationEvent):void
			{
				var content:String = newLabel.text;
				while(true)
				{
					if(content.length > 0)
					{
						var t1:String = content.charAt(0);
						var t2:String = content.substr(1);
						t1 = t1.toUpperCase();
						var nn:Number = parseInt(t1);
						if(isNaN(nn))
						{
							content = t1 + t2;
							break;
						}else
						{
							content = t2;
						}
					}else
					{
						break;
					}
				}
				newLabel.text = content;
			}
			
			private function checkWord(content:String):String
			{
				while(true)
				{
					
				}
				if(content.length > 0)
				{
					var t1:String = content.charAt(0);
					var t2:String = content.substr(1);
					t1 = t1.toUpperCase();
					var nn:Number = parseInt(t1);
					if(isNaN(nn))
					{
						content = t1 + t2;
					}else
					{
						content = t2;
						checkWord(content);
					}
				}
				return content;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	
	<s:Label x="11" y="69" fontSize="12" text="模版表位置："/>
	<s:TextInput id="pathLabel" x="90" y="63" width="407" editable="false"/>
	<s:Label id="nameLabel" x="10" y="16" fontFamily="黑体" fontSize="30" text="模版表编辑工具"/>
	<s:Button id="changePathBtn" x="504" y="63" label="更改" click="changePathBtn_clickHandler(event)"/>
	<s:Button id="openPathBtn" x="585" y="63" label="打开" click="openPathBtn_clickHandler(event)"/>
	<s:Button id="flushBtn" x="585" y="63" label="刷新" click="flushBtn_clickHandler(event)"/>
	<s:Button id="closeBtn" x="638" y="2" width="31" label="X" click="closeBtn_clickHandler(event)"/>
	<s:Label x="11" y="97" fontSize="12" text="输出类位置："/>
	<s:Label x="10" y="159" fontSize="12" text="创建新表："/>
	<s:TextInput id="classPathLabel" x="90" y="91" width="407" editable="false"/>
	<s:Button id="changeClassPathBtn" x="504" y="91" label="更改" click="changeClassPathBtn_clickHandler(event)"/>
	<s:Label x="10" y="126" fontSize="12" text="输出数据位置："/>
	<s:TextInput id="binaryPathLabel" x="89" y="120" width="407" editable="false"/>
	<s:Button id="changeBinaryPathBtn" x="503" y="120" label="更改" click="changeBinaryPathBtn_clickHandler(event)"/>
	<s:Button id="outputBtn" x="396" y="12" width="77" height="34" label="输出" fontFamily="黑体"
			  fontSize="20" click="outputBtn_clickHandler(event)"/>
	<s:DataGrid id="tempateList" x="10" y="181" width="652" height="300" editable="true"
				requestedRowCount="4">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="name" headerText="表名" width="100"></s:GridColumn>
				<s:GridColumn dataField="path" headerText="路径"></s:GridColumn>
			</s:ArrayList>
		</s:columns>
		<s:typicalItem>
			<fx:Object name="示例数据" path="示例数据"></fx:Object>
		</s:typicalItem>
		<s:ArrayList>
		</s:ArrayList>
	</s:DataGrid>
	<s:CheckBox id="isOutClass" x="480" y="29" label="输出类文件" selected="true" change="isOutClass_changeHandler(event)"/>
	<s:CheckBox id="isZlib" x="571" y="29" label="Zlib压缩" selected="true" change="isOutClass_changeHandler(event)"/>
	<s:TextInput id="newLabel" x="90" y="154" prompt="新表名字" restrict="A-Za-z0-9" change="newLabel_changeHandler(event)"/>
	<s:Button id="createBtn" x="226" y="155" label="创建" click="createBtn_clickHandler(event)"/>
	<s:TextArea id="debugLabel" x="10" y="511" width="652" height="146" editable="false"/>
	<s:ComboBox id="comboBox" x="238" y="21"/>
	<s:Label x="477" y="162" color="#2E9010" text="注：选中模板表按下enter打开编辑"/>
	<s:Button id="clearBtn" x="11" y="487" label="清空日志" click="clearBtn_clickHandler(event)"/>
</s:Group>
